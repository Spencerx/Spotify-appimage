#!/bin/sh

APP=spotify

# CREATE A TEMPORARY DIRECTORY
mkdir -p tmp
cd ./tmp

# DOWNLOADING THE DEPENDENCIES
if ! test -f ./appimagetool; then
	echo "Downloading appimagetool"
	curl -#Lo appimagetool https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
	chmod a+x ./appimagetool
fi

# DOWNLOAD ALL THE NEEDED PACKAGE AND COMPILE THE APPDIR
DEB=$(curl -Ls http://repository.spotify.com/pool/non-free/s/spotify-client/ | grep spotify-client_ | grep amd64.deb | grep -o -P '(?<=").*(?=")' | tail -1)
if ! test -f ./"$APP"*.deb; then
	echo "Downloading $DEB from upstream"
	curl -#Lo "$DEB" http://repository.spotify.com/pool/non-free/s/spotify-client/"$DEB"
	ar -x *.deb
	tar xf data.tar.* || exit 0
	mkdir -p "$APP".AppDir
	mv ./usr/share ./"$APP".AppDir/opt
	cp ./"$APP".AppDir/opt/spotify/*.desktop ./"$APP".AppDir || exit 0
	cp ./"$APP".AppDir/opt/spotify/icons/spotify-linux-512.png ./"$APP".AppDir/spotify-client.png || exit 0
fi

# CHECK VERSION
if test -f ./"$APP"*.deb; then
	tar xf ./control.tar.* || exit 0
	VERSION=$(grep Version 0<control | cut -c 10- | tr ':' '\n' | grep "\." | head -1)
fi
[ -z "$VERSION" ] && VERSION=$(curl -s https://aur.archlinux.org/packages/spotify | grep "Package Details: spotify" | cut -c 40- | rev | cut -c 6- | rev)

# DOWNLOAD EXTRA PACKAGES
arch_packages="libcurl-gnutls libayatana-appindicator libayatana-indicator ayatana-ido"
for p in $arch_packages; do
	if ! test -f ./"$p".tar.zst; then
		for REPO in { "core" "extra" "community" "multilib" }; do
			if curl --output /dev/null --silent --head --fail "https://archlinux.org/packages/${REPO}/x86_64/$p/download/" 1>/dev/null; then
				curl -#Lo "$p".tar.zst "https://archlinux.org/packages/${REPO}/x86_64/$p/download/" 2>/dev/null && echo "Downloaded $p"
			fi
		done
		tar fx ./"$p".tar.zst
	fi
done

# MERGE DOWNLOADED LIBRARIES
mkdir -p ./"$APP".AppDir/usr/lib
rsync -av ./usr/lib/* ./"$APP".AppDir/usr/lib/

# CUSTOMIZE THE APPRUN
rm -f ./"$APP".AppDir/AppRun
echo '#!/bin/sh
HERE="$(dirname "$(readlink -f "${0}")")"
export PATH="${HERE}/opt/spotify/:${HERE}/opt/spotify/Apps/:${PATH:+:$PATH}"
export LD_LIBRARY_PATH="${HERE}/opt/spotify/:${HERE}/opt/spotify/swiftshader/:${HERE}/usr/lib/:${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
export XDG_DATA_DIRS="${HERE}/opt/spotify/${XDG_DATA_DIRS:+:$XDG_DATA_DIRS}"
export GSETTINGS_SCHEMA_DIR="${HERE}/opt/spotify/swiftshader/${GSETTINGS_SCHEMA_DIR:+:$GSETTINGS_SCHEMA_DIR}"
EXEC="${HERE}/opt/spotify/spotify"
exec "${EXEC}"' >> ./"$APP".AppDir/AppRun
chmod a+x ./"$APP".AppDir/AppRun

# EXPORT THE APP TO AN APPIMAGE
ARCH=x86_64 ./appimagetool --comp zstd --mksquashfs-opt -Xcompression-level --mksquashfs-opt 20 \
	-u "gh-releases-zsync|$GITHUB_REPOSITORY_OWNER|Spotify-appimage|continuous|*x86_64.AppImage.zsync" \
	./"$APP".AppDir Spotify-"$VERSION"-x86_64.AppImage || exit 1

cd .. && mv ./tmp/*AppImage* ./
